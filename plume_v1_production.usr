c-----------------------------------------------------------------------
c-----------------------------------------------------------------------
c Problem dependent constants:
#define lpart 100000

c Set runParticles to 1 if running with particles
#define runParticles 1

c-----------------------------------------------------------------------
c Used to specify customized or solution dependent material properties.
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      real renum, responge

      real rmin,rmax,zmin,zmax
      common /domsizes/ rmin,rmax,zmin,zmax

      rmin = 0.0
      rmax = 2.0
      zmin = 0.0
      zmax = 8.0

      renum = 1000
      responge = 10

      udiff =1.0/renum
      utrans=1.0

c.....Sponge at the top of the domain

      scoefr_z = 10/(zmax-zmin)
      scoefr_r = 20/(rmax-rmin)
      zloc=zmax
      rloc=rmax

      radial = (x**2 + y**2)**0.5

      udiff = 1./renum
     $       +(1./responge)*(1.+derf(scoefr_z*(z - zloc)))
     $       +(1./responge)*(1.+derf(scoefr_r*(radial - rloc)))


      return
      end
c-----------------------------------------------------------------------
c Sets source term (which will subsequently be multiplied by the density) for the momentum equation.
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ffx = 0.0
      ffy = 0.0
      ffz = temp

      return
      end
c-----------------------------------------------------------------------
c Sets the source term for the scalar equation.
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      qvol   = 0.0
      source = 0.0

      if(ifield.eq.2)then
	
	qvol = -uz

      endif

      return
      end
c-----------------------------------------------------------------------
c General purpose function that gets executed before the time stepper and after every time step.
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'

      common /rparts/ pts(ldim,lpart),vel(ldim,2:3,lpart)
      common /iparts/ npart,partid(lpart)
      integer partid

      real rmin,rmax,zmin,zmax
      common /domsizes/ rmin,rmax,zmin,zmax

      real domht,theta_in
      integer i,n

      rmin = 0.0
      rmax = 2.0
      zmin = 0.0
      zmax = 8.0

c.....parameters

      pi = 3.14159
      R0 = 0.050
      W0 = 5.051

      domht = zmax
      disturb_max = (1 - 0.5)*0.2
      theta_in = (1/pi)*(1/(W0*R0**2)) + disturb_max

      n = nx1*ny1*nz1*nelt

      aux = zm1(i,1,1,1)

c.....clip the temperature

      do i=1,n

	if(t(i,1,1,1,1)+aux.lt.0.0)then
	  t(i,1,1,1,1) = 0.0
	endif

	if(t(i,1,1,1,1)+aux.gt.max(domht,theta_in))then
          t(i,1,1,1,1) = max(domht,theta_in) - aux
	end if

      end do

      if (runParticles.eq.1) then

c     NOTE:  The following outpost call coordinates the .f0000 numbering
c            with the particle file numbering.
c
c            This coordination is important when synching frames for a movie.

      ipstep = iostep ! Particle output coordinated with iostep
      ipstep = iostep/4

      ifxyo = .true.
      if (istep.gt.iostep) ifxyo = .false.
      if (istep.eq.0) then 
        call outpost(vx,vy,vz,pr,t,'in_') ! Part. coordination
      endif

      call my_particle_generator(ipstep)                ! Particle injection

      n=nx1*ny1*nz1*nelt
      umax = glamax(vx,n)
      vmax = glamax(vy,n)
      wmin = glmin(vz,n)
      wmax = glmax(vz,n)
      wmax = glmax(vz,n)
      if (nid.eq.0) write(6,1) istep,time,umax,vmax,wmin,wmax
    1 format(i9,1p5e12.4,' wmax')

      endif

      return
      end
c-----------------------------------------------------------------------
c Sets bc's. Only called for special bc types and only for points on the boundary surface.
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      REAL :: noise

      ux=0.0
      uy=0.0
      uz=0.0
      temp=0.0  

c.....Set passive scalar to zero at boundaries
      if(ifield.eq.3)then
	temp = 0.0
      endif

c.....Constants
      pi = 3.14159
      centre = 0.0
      pwr = 12.0

c.....Source Parameters
      R0 = 0.05
      W0 = 5.051 
      T0 = (1/pi)*(1/(W0*R0**2))

c.....Floor boundary condition
      if ( z.eq.0 ) then
        circle = x**2 + y**2
        radius = R0**2
        if ( circle.lt.radius ) then

c.........(if changing disturb, also change disturb_max in usrchk)
          call random_number(noise)
          disturb = (noise - 0.5)*0.2

          temp = (T0 + disturb*T0) * (-(circle/radius)**pwr + 1)
          uz = (W0 + disturb*W0) * (-(circle/radius)**pwr + 1)

c          temp = T0 + disturb*T0
c          uz = W0 + disturb*W0

          if(ifield.eq.3)then
            temp = 1.0 * (-(circle/radius)**pwr + 1)
c            temp = EXP(-0.5*(x_cond + y_cond))
          endif

        endif
      endif

      return
      end
c-----------------------------------------------------------------------
c Sets initial conditions.
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux=0.0
      uy=0.0
      uz=0.0
      temp=0.0  

      if(ifield.eq.3)then
	temp = 0.0
      endif

      return
      end
c-----------------------------------------------------------------------
c Used to modify the element vertices.
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
c Used to modify the spectral element mesh.
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
c Used to initialize case/user specific data.
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
c Particle
c-----------------------------------------------------------------------
      subroutine interp_v(uvw,xyz,n)
c
c     evaluate velocity for list of points xyz
c
      include 'SIZE'
      include 'TOTAL'

      real uvw(ldim,n),xyz(ldim,n)

      parameter(nmax=lpart,nfldmx=ldim)

      common /rwk_intp/
     $       fwrk(lx1*ly1*lz1*lelt,nfldmx),
     $       rwk(nmax,ldim+1),
     $       fpts(ldim*nmax),
     $       pts(ldim*nmax)
      common /iwk_intp/
     $       iwk(nmax,3)

      integer icalld,e
      save    icalld
      data    icalld /0/

      nxyz  = nx1*ny1*nz1
      ntot  = nxyz*nelt

      if (n.gt.nmax) call exitti ('n > nmax in interp_v!$',n)

      if (nelgt.ne.nelgv) call exitti
     $   ('nelgt.ne.nelgv not yet supported in interp_v!$',nelgv)

      do i=1,n                          ! ? not moving -> save?
         pts(i)     = xyz(1,i)
         pts(i + n) = xyz(2,i)
         if (if3d) pts(i + n*2) = xyz(3,i)
      enddo

      if (icalld.eq.0) then             ! interpolation setup
        icalld = 1
        tolin  = 1.e-8
        call intp_setup(tolin)
      endif

      ! pack working array
      call opcopy(fwrk(1,1),fwrk(1,2),fwrk(1,3),vx,vy,vz)

      ! interpolate
      call intp_do(fpts,fwrk,ndim,
     $             pts(1),pts(1+n),pts(2*n+1),n,
     $             iwk,rwk,nmax,.true.)


      do i=1,n
         uvw(1,i) = fpts(i)
         uvw(2,i) = fpts(i + n)
         if(if3d) uvw(3,i) = fpts(i + n*2)
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine particle_advect_std(x,vh,partv,npart,sv)

c     Lagrangian particle advection

      include 'SIZE'
      include 'TOTAL'

      logical exist

      real x(ldim,lpart),vh(ldim,2:3,lpart),partv(lpart),sv(lpart)
      real x_save(ldim+1)
      data x_save/ 4 * 0.0/     ! This is set to 4 cause I cbb to find a way to write ldim+1
      integer count

      real rmin,rmax,zmin,zmax
      common /domsizes/ rmin,rmax,zmin,zmax

      common /scruz/ u1(ldim,lpart)

      common /padvc/ xmx(3,0:2)

      rmin = 0.0
      rmax = 2.0
      zmin = 0.0
      zmax = 8.0

c.....Initialises file to write saved particles to.
      if (istep.eq.0) then
        if (nid.eq.0) then
          inquire(file="part_left.3D", exist=exist)
          if (exist) then
            open(unit=73,file="part_left.3D",status="old"
     $      , access="append")
          else
            open(unit=73,file="part_left.3D",status="new")
          endif
          close(73)
        endif
      endif

c.....Coefficients for Adams-Bashforth scheme.
      if (istep.eq.0) then      ! AB1
         call rzero(vh,3*ndim*npart)
         c1 = 1.
         c2 = 0.
         c3 = 0.
      elseif (istep.eq.1) then  ! AB2
         c1 = 3
         c2 = -1.
         c3 = 0
         c1 = c1/2.
         c2 = c2/2.
      else                    ! AB3
         c1 = 23.
         c2 = -16.
         c3 = 5.
         c1 = c1/12.
         c2 = c2/12.
         c3 = c3/12
      endif

      call interp_v(u1,x,npart)

c      settling_velocity = 1.0

      do i=1,npart
          do k=1,ndim
c...........Update particle position and history.
            x(k,i) = x(k,i)
     $              + dt*(c1*u1(k,i) + c2*vh(k,2,i) + c3*vh(k,3,i))

c...........Apply settling velocity to 3rd dimension only.
            if (k.eq.3) then
              x(k,i) = x(k,i) - dt*sv(i)
            endif

c...........Update particle and fluid velocity history.
            vh(k,3,i) = vh(k,2,i)
            vh(k,2,i) = u1(k,i)
          enddo
      enddo

c.....Remove and save particles that leave the domain.
      do i=1,npart
        j = npart - i + 1
        radial = (x(1,j)**2 + x(2,j)**2)**0.5
        if (  radial.lt.rmin .or. radial.gt.rmax .or.
     &        x(3,j).lt.zmin .or. x(3,j).gt.zmax ) then
          do k = 1,ndim
            x_save(k) = x(k,j)
            x(k,j:npart-1) = x(k,j+1:npart)
            vh(k,2:3,j:npart-1) = vh(k,2:3,j+1:npart)
            u1(k,j:npart-1) = u1(k,j+1:npart)
            sv(j:npart-1) = sv(j+1:npart)
          enddo
          x_save(4) = sv(j)

          open(unit=73,file="part_left.3D",
     $      status="old", access="append")
          write(73,3) x_save
 3        format(4f6.3)
          close(73)

        endif
      enddo

      return
      end
c----------------------------------------------------------------------
      subroutine particle_out (x,partid,partv,npart,ipstep,sv)
      include 'SIZE'
      include 'TOTAL'

      real x(ldim,lpart),partv(lpart),sv(lpart)
      integer partid(lpart)

      common /scrns/ x_tmp(ldim+1,lpart),work(ldim+1,lpart)

      character*128 fname

      integer icalld
      save    icalld
      data    icalld  /0/

      if (mod(istep,ipstep).ne.0) return

      icalld = icalld+1
      if (nid.eq.0) then
        write(fname,1) icalld
 1      format('part',i5.5,'.3D')
        open(unit=72,file=fname)
      endif

      min_points = iglmin(partid,npart)
      max_points = iglmax(partid,npart)
      n_active   = max_points - min_points + 1
      npass = n_active / lpart

      if (n_active.gt.npass*lpart) npass = npass+1
      ilast=min_points-1

      do ipass=1,npass

        mpart = min(lpart,max_points-ilast)
        i0    = ilast
        i1    = i0 + mpart
        ilast = i1

        call rzero(x_tmp,(ldim+1)*lpart)
        do ii=1,npart
          if (i0.lt.partid(ii).and.partid(ii).le.i1) then
            i = partid(ii)-i0
            call copy(x_tmp(1,i),x(1,ii),ldim)  ! Coordinates
            x_tmp(ldim+1,i) = sv(ii)           ! changed from "= partv(ii)"         ! Store value here
          endif
        enddo

        call gop(x_tmp,work,'+  ',(ldim+1)*lpart)
        if (nid.eq.0) write(72,2)((x_tmp(k,i),k=1,ldim+1),i=1,mpart)
 2      format(1p4e17.9)

      enddo

      if (nid.eq.0) close(72)

      return
      end
C-----------------------------------------------------------------------
      subroutine my_particle_generator(ipstep) ! Particle injection
      include 'SIZE'
      include 'TOTAL'
      include 'mpif.h'

      common /rparts/ pts(ldim,lpart),vel(ldim,2:3,lpart),sv(lpart)
      common /rparts/ partv(lpart)
      common /iparts/ npart,partid(lpart)
      integer partid

      real ptime           ! Time the particle motion
      save ptime
      data ptime  /0./

      ptime0 = dnekclock_sync()

      call particle_init       (pts,partid,partv,npart,ipstep,sv)
      call particle_advect_std (pts,vel,partv,npart,sv)
      call particle_out        (pts,partid,partv,npart,ipstep,sv)

      ptime1 = dnekclock_sync() ! Track computational cost of particles

      dptime = (ptime1-ptime0)
      ptime  = ptime + dptime

      if (mod(istep,ipstep).eq.0) then
         npmin = iglmin(npart,1)
         npmax = iglmax(npart,1)
         nptot = iglsum(npart,1)
         npmav = nptot/np
         ptpp  = dptime / nptot  ! particle-time per point
         if (nid.eq.0) write(6,1)
     $      istep,npmin,npmav,npmax,nptot,ptpp,dptime,ptime,time
    1       format(4i7,i9,1p4e15.7,' ptime')
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine particle_init(x,partid,partv,npart,ipstep,sv)
c
c     This version does continuous injection and overwrites old entries
c
      include 'SIZE'
      include 'TOTAL'

      real x(ldim,lpart),partv(lpart),sv(lpart)
      integer partid(lpart)

      real settling_velocities(numSV)
      data settling_velocities /0.51,1.01,1.51,2.01/

      integer lcount,icount
      save    lcount,icount
      data    lcount,icount /0,0/

      real A(3,62160)
      integer nlines=62160

      if (mod(istep,ipstep).ne.0) return
      llpart = lpart

      dx = 0.01

      k0 = 0
      k  = icount       ! icount = total # particles emitted
      l  = lcount       ! Index into local particle array

      do i = 1,numSV

        nw = 4

        yp = 0.0
        zp = 0.1
        do ipart = 1,nw  ! nw points on a wire

          xp = 0.0 + dx*(ipart-1)*(-1)**ipart

          settling_velocity = 0.5*ipart + 0.01

          if (mod(k,np).eq.nid) then ! Inject particle _only_ on this processor
            l=l+1  ! local count
            x(1,l) = xp
            x(2,l) = yp
            x(3,l) = zp
            sv(l) = settling_velocities(i)
            partid(l) = k+1
          endif

          k = k+1     ! Total count

        enddo
      enddo

      k0= k0+1    ! Count for this release (for coloring only)

      icount = k
      lcount = l
      npart  = max(npart,lcount)

      return
      end


c..........Reminder of how writing used to work...
c          if (nid.eq.0) then
c            inquire(file="partRight.3D", exist=exist)
c            if (exist) then
c              open(unit=73,file="partRight.3D",status="old"
c     $          , access="append")
c            else
c              open(unit=73,file="partRight.3D",status="new")
c            endif
c            write(73,2) x(:,l)
c 2          format(3f6.3)
c            close(73)
c          endif

